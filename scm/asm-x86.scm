#lang scheme

;; Base definition of registers
(define (r0) 0)
(define (r1) 1)
(define (r2) 2)
(define (r3) 3)
(define (r4) 4)
(define (r5) 5)
(define (r6) 6)
(define (r7) 7)

;; Define these registers specially since we need to distinguish between them
;; (they need to be comparable with eq?)
(define (cr0) 0)
(define (cr1) 1)
(define (cr2) 2)
(define (cr3) 3)
(define (cr4) 4)

;; Same for these
(define (es) 0)
(define (cs) 1)
(define (ss) 2)
(define (ds) 3)
(define (fs) 4)
(define (gs) 5)

;; Use base definition for register nubering here
(define al r0)
(define cl r1)
(define dl r2)
(define bl r3)
(define ah r4)
(define ch r5)
(define dh r6)
(define bh r7)

(define ax r0)
(define cx r1)
(define dx r2)
(define bx r3)
(define sp r4)
(define bp r5)
(define si r6)
(define di r7)

(define eax r0)
(define ecx r1)
(define edx r2)
(define ebx r3)
(define esp r4)
(define ebp r5)
(define esi r6)
(define edi r7)

(define st0 r0)
(define st1 r1)
(define st2 r2)
(define st3 r3)
(define st4 r4)
(define st5 r5)
(define st6 r6)
(define st7 r7)

(define mm0 r0)
(define mm1 r1)
(define mm2 r2)
(define mm3 r3)
(define mm4 r4)
(define mm5 r5)
(define mm6 r6)
(define mm7 r7)

(define xmm0 r0)
(define xmm1 r1)
(define xmm2 r2)
(define xmm3 r3)
(define xmm4 r4)
(define xmm5 r5)
(define xmm6 r6)
(define xmm7 r7)

(define dr0 r0)
(define dr1 r1)
(define dr2 r2)
(define dr3 r3)
(define dr4 r4)
(define dr5 r5)
(define dr6 r6)
(define dr7 r7)

(define tr0 r3)
(define tr1 r4)
(define tr2 r5)
(define tr3 r6)
(define tr4 r7)

(define (byte b)
  (display b))
(define (op b)
  (byte b)
  (newline))
(define (op2 b)
  (byte #x0F)
  (display " ")
  (byte b)
  (newline))
(define (word w)
  (byte (bitwise-and w #xFF))
  (display " ")
  (byte (quotient (bitwise-and w #xFF00) #x100))
  (display " ")
  (byte (quotient (bitwise-and w #xFF0000) #x10000))
  (display " ")
  (byte (quotient (bitwise-and w #xFF000000) #x1000000))
  (newline))
		 

(define reg? procedure?)

(define (mov dst src)
  (cond
	((and (reg? dst)
		  (reg? src))

	((and (reg? dst)
		  (number? src))
	 (op #xB8)
	 (word src))
	(else (error "mov called with wrong arguments:" src dst))))

(define (push x)
  (cond
	((eq? x es) (op #x05))
	((eq? x cs) (op #x0E))
	((eq? x ss) (op #x15))
	((eq? x ds) (op #x1E))
	((eq? x fs) (op2 #xA0))
	((eq? x gs) (op2 #xA8))
	((reg? x) (op (+ #x50 (x))))
	(else (error "push called with wrong arguments:" x))))

(define (retn . x)
  (cond
	((null? x) (op #xC3))
	((number? (car x)) (op #xC2))
	(else (error "ret called with wrong arguments:" x))))

(push ebp)
(mov eax 42)
;(mov ebp esp)
;(leave)
(retn)
